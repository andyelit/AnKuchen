<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Core" #>
using System;
using System.Collections.Generic;
using AnKuchen.Extensions;
using UnityEngine;
using UnityEngine.UI;

namespace AnKuchen.KuchenList
{
<# for (var t = 1; t <= 2; ++t) { #>
    public class VerticalList<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>> : IKuchenList <#= string.Join(" ", Enumerable.Range(1, t).Select(i => $"where T{i} : IReusableMappedObject, new()")) #>
    {
        private readonly ScrollRect scrollRect;
<# for (var i = 1; i <= t; ++i) { #>
        private readonly T<#= i #> original<#= i #>;
<# } #>
        private List<UIFactory<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>>> contents = new List<UIFactory<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>>>();
        private readonly List<(IReusableMappedObject, float Position)> items = new List<(IReusableMappedObject, float Position)>();
        public float Spacing { get; private set; }

        private Margin margin = new Margin();
        public IReadonlyMargin Margin => margin;

        public VerticalList(ScrollRect scrollRect, <#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i} original{i}")) #>)
        {
            this.scrollRect = scrollRect;

<# for (var i = 1; i <= t; ++i) { #>
            this.original<#= i #> = original<#= i #>;
            this.original<#= i #>.Mapper.Get().SetActive(false);
<# } #>

            var kuchenList = this.scrollRect.gameObject.AddComponent<KuchenList>();
            kuchenList.List = this;
        }

        public void DeactivateAll()
        {
            foreach (var item in items)
            {
                item.Item1?.Deactivate();
            }
            items.Clear();
        }

        private readonly Vector3[] fourCornersArray = new Vector3[4];
        private readonly Vector2[] worldCornersEdge = new Vector2[2];
        public void UpdateView()
        {
            /*
            {
                var viewPort = scrollRect.viewport;
                viewPort.GetWorldCorners(fourCornersArray);
                Debug.Log($"{fourCornersArray[0]}, {fourCornersArray[2]}");
            }
            {
                var viewPort = scrollRect.content;
                viewPort.GetWorldCorners(fourCornersArray);
                Debug.Log($"- {fourCornersArray[0]}, {fourCornersArray[2]}");
            }
            */
        }

        private void UpdateListContents()
        {
            // clear elements
            foreach (var item in items)
            {
                if (item.Item1 != null)
                {
                    item.Item1.Deactivate();
                    UnityEngine.Object.Destroy(item.Item1.Mapper.Get());
                }
            }
            items.Clear();

            // create elements
            var calcHeight = Margin.Top;
            foreach (var content in contents)
            {
                /*
                RectTranform newObject = null;
                IReusableMappedObject newMappedObject = null;
                if (content.Callback1 != null) (newObject, newMappedObject) = CreateNewObject(original1, content.Callback1);
                if (content.Callback2 != null) (newObject, newMappedObject) = CreateNewObject(original2, content.Callback2);
                if (newObject == null || newMappedObject == null) continue;
                */

                items.Add((null, calcHeight));
<# for (var i = 1; i <= t; ++i) { #>
                if (content.Callback<#= i #> != null) calcHeight += original<#= i #>.Mapper.Get<RectTransform>().rect.height;
<# } #>
                calcHeight += Spacing;
            }
            if (contents.Count > 0) calcHeight -= Spacing; // 最後は要らない
            calcHeight += Margin.Bottom;

            // calc content size
            var contentRectTransform = scrollRect.content.GetComponent<RectTransform>();
            var s = contentRectTransform.sizeDelta;
            contentRectTransform.sizeDelta = new Vector2(s.x, calcHeight);

            /*
            // move elements position
            var baseY = calcHeight / 2f;
            foreach (var (rectTransform, _, position) in items)
            {
                var p = rectTransform.anchoredPosition;
                var r = rectTransform.rect;
                rectTransform.anchoredPosition = new Vector3(p.x, baseY - position - r.height / 2f, 0f);
            }
            */
        }

        private (RectTransform, IReusableMappedObject) CreateNewObject<T>(T original, Action<T> contentCallback) where T : IReusableMappedObject, new()
        {
            var newObject = original.Duplicate();
            var newRectTransform = newObject.Mapper.Get<RectTransform>();
            newRectTransform.SetParent(scrollRect.content);
            newObject.Mapper.Get().SetActive(true);
            newObject.Activate();
            contentCallback(newObject);
            return (newRectTransform, newObject);
        }

        public ListContentEditor Edit()
        {
            return new ListContentEditor(this);
        }

        public class ListContentEditor : IDisposable
        {
            private readonly VerticalList<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>> parent;
            public List<UIFactory<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>>> Contents { get; set; }
            public float Spacing { get; set; }
            public Margin Margin { get; set; }

            public ListContentEditor(VerticalList<<#= string.Join(", ", Enumerable.Range(1, t).Select(i => $"T{i}")) #>> parent)
            {
                this.parent = parent;
                Contents = parent.contents;
                Spacing = parent.Spacing;
                Margin = parent.margin;
            }

            public void Dispose()
            {
                parent.contents = Contents;
                parent.Spacing = Spacing;
                parent.margin = Margin;
                parent.UpdateListContents();
            }
        }
    }

<# } #>
}